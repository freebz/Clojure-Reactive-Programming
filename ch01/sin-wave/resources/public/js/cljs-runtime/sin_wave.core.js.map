{"version":3,"sources":["sin_wave/core.cljs"],"mappings":"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","names":["sin-wave.core/main","js/console","sin-wave.core/canvas","js/document","sin-wave.core/ctx","sin-wave.core/interval","js/Rx.Observable.interval","sin-wave.core/time","n","sin-wave.core/deg-to-rad","Math/PI","sin-wave.core/sine-coord","x","sin","Math/sin","y","sin-wave.core/sine-wave","xysin","sin-wave.core/fill-rect","colour","p__20108","map__20109","cljs.core/--destructure-map","cljs.core.get","sin-wave.core/colour","p__20110","map__20111","p1__20112#","p2__20113#","cljs.core/PersistentVector","p__20114","vec__20115","map__20118","cljs.core.nth","sin-wave.core/red","_","sin-wave.core/blue","sin-wave.core/concat","js/Rx.Observable.concat","sin-wave.core/defer","js/Rx.Observable.defer","sin-wave.core/from-event","js/Rx.Observable.fromEvent","sin-wave.core/mouse-click","sin-wave.core/cycle-colour","G__20119","G__20120","G__20121","G__20122","G__20123","p1__20124#","p2__20125#","p__20126","vec__20127","map__20130"],"sourcesContent":["(ns sin-wave.core)\n\n(defn main [])\n\n\n(.log js/console \"hello clojurescript\")\n\n\n(def canvas  (.getElementById js/document \"myCanvas\"))\n(def ctx     (.getContext canvas \"2d\"))\n\n\n;; Clear canvas before doing anything else\n(.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n\n\n\n;; Creating time\n\n(def interval    js/Rx.Observable.interval)\n(def time        (interval 10))\n\n\n(-> time\n    (.take 5)\n    (.subscribe (fn [n]\n                  (.log js/console n))))\n\n\n(defn deg-to-rad [n]\n  (* (/ Math/PI 180) n))\n\n(defn sine-coord [x]\n  (let [sin (Math/sin (deg-to-rad x))\n        y   (- 100 (* sin 90))]\n    {:x   x\n     :y   y\n     :sin sin}))\n\n\n(.log js/console (str (sine-coord 50)))\n;;{:x 50, :y 31.05600011929198, :sin 0.766044443118978}\n\n\n(def sine-wave\n  (.map time sine-coord))\n\n\n(-> sine-wave\n    (.take 5)\n    (.subscribe (fn [xysin]\n                  (.log js/console (str xysin)))))\n\n;; {:x 0, :y 100, :sin 0}\n;; {:x 1, :y 98.42928342064448, :sin 0.01745240643728351}\n;; {:x 2, :y 96.85904529677491, :sin 0.03489949670250097}\n;; {:x 3, :y 95.28976393813505, :sin 0.052335956242943835}\n;; {:x 4, :y 93.72191736302872, :sin 0.0697564737441253}\n\n\n(defn fill-rect [x y colour]\n  (set! (.-fillStyle ctx) colour)\n  (.fillRect ctx x y 2 2))\n\n(-> sine-wave\n    (.take 600)\n    (.subscribe (fn [{:keys [x y]}]\n                  (fill-rect x y \"orange\"))))\n\n\n\n;; More colors\n\n(def colour (.map sine-wave\n                  (fn [{:keys [sin]}]\n                    (if (< sin 0)\n                      \"red\"\n                      \"blue\"))))\n\n\n(-> (.zip sine-wave colour #(vector % %2))\n    (.take 600)\n    (.subscribe (fn [[{:keys [x y]} colour]]\n                  (fill-rect x y colour))))\n\n\n\n;; Making it reactive\n\n(def red  (.map time (fn [_] \"red\")))\n(def blue (.map time (fn [_] \"blue\")))\n\n\n(def concat     js/Rx.Observable.concat)\n(def defer      js/Rx.Observable.defer)\n(def from-event js/Rx.Observable.fromEvent)\n\n\n(def mouse-click (from-event canvas \"click\"))\n\n\n(def cycle-colour\n  (concat (.takeUntil red mouse-click)\n          (defer #(concat (.takeUntil blue mouse-click)\n                          cycle-colour))))\n\n\n(-> (.zip sine-wave cycle-colour #(vector % %2))\n    (.take 600)\n    (.subscribe (fn [[{:keys [x y]} colour]]\n                  (fill-rect x y colour))))\n"]}
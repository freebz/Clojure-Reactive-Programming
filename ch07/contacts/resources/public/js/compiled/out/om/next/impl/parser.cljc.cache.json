["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$om.next.impl.parser","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^<","^<","~$util","~$om.util","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$expr->ast",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","~:line",116,"~:column",7,"~:end-line",116,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^K",[["~$x"]]]]],"~:doc","Given a query expression convert it into an AST."],"^7","~$om.next.impl.parser/expr->ast","~:variadic",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",16,"~:method-params",["^K",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"^F",116,"^H",116,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["~$x"]]]]],"^M","Given a query expression convert it into an AST."],"~$call->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",74,"^G",7,"^H",74,"^I",16,"^J",["^K",["^L",["^K",[[["~$f","~$args","~:as","~$call"]]]]]]],"^7","~$om.next.impl.parser/call->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",16,"^P",["^K",[["~$p__21869"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",74,"^H",74,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[[["~$f","^V","^W","^X"]]]]]]],"~$ast->expr",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",141,"^G",7,"^H",141,"^I",16,"^J",["^K",["^L",["^K",[["~$ast"],[["^ ","~:keys",["~$type","~$component"],"^W","^10"],"~$unparse?"]]]]],"^M","Given a query expression AST convert it back into a query expression.","~:top-fn",["^ ","^O",false,"^S",2,"^P",["^K",[["^10"],[["^ ","^11",["^12","^13"],"^W","^10"],"^14"]]],"^J",["^K",[["^10"],[["^ ","^11",["^12","^13"],"^W","^10"],"^14"]]],"^R",["^K",[null,null]]]],"^7","~$om.next.impl.parser/ast->expr","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",16,"^15",["^ ","^O",false,"^S",2,"^P",["^K",[["^10"],[["^ ","^11",["^12","^13"],"^W","^10"],"^14"]]],"^J",["^K",[["^10"],[["^ ","^11",["^12","^13"],"^W","^10"],"^14"]]],"^R",["^K",[null,null]]],"^P",["^K",[["^10"],[["^ ","^11",["^12","^13"],"^W","^10"],"^14"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",141,"^H",141,"^S",2,"^T",true,"^J",["^K",[["^10"],[["^ ","^11",["^12","^13"],"^W","^10"],"^14"]]],"^M","Given a query expression AST convert it back into a query expression."],"~$rethrow?",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",245,"^G",7,"^H",245,"^I",15,"^J",["^K",["^L",["^K",[["~$x"]]]]]],"^7","~$om.next.impl.parser/rethrow?","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",15,"^P",["^K",[["~$x"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",245,"^H",245,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["~$x"]]]]]],"~$parameterize",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",136,"^G",7,"^H",136,"^I",19,"^J",["^K",["^L",["^K",[["~$expr","~$params"]]]]]],"^7","~$om.next.impl.parser/parameterize","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",19,"^P",["^K",[["^1:","^1;"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",136,"^H",136,"^S",2,"^T",true,"^J",["^K",["^L",["^K",[["^1:","^1;"]]]]]],"~$path-meta",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",175,"^G",7,"^H",175,"^I",16,"^J",["^K",["^L",["^K",[["~$data","~$path","~$query"],["^1>","^1?","^1@","~$union-expr"]]]]],"^M","Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union.","^15",["^ ","^O",false,"^S",4,"^P",["^K",[["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^J",["^K",[["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^R",["^K",[null,null]]]],"^7","~$om.next.impl.parser/path-meta","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",16,"^15",["^ ","^O",false,"^S",4,"^P",["^K",[["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^J",["^K",[["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^R",["^K",[null,null]]],"^P",["^K",[["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",175,"^H",175,"^S",4,"^T",true,"^J",["^K",[["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^M","Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union."],"~$wrap-expr",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",129,"^G",7,"^H",129,"^I",16,"^J",["^K",["^L",["^K",[["~$root?","^1:"]]]]]],"^7","~$om.next.impl.parser/wrap-expr","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",16,"^P",["^K",[["^1D","^1:"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",129,"^H",129,"^S",2,"^T",true,"^J",["^K",["^L",["^K",[["^1D","^1:"]]]]]],"~$join->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",91,"^G",7,"^H",91,"^I",16,"^J",["^K",["^L",["^K",[["~$join"]]]]]],"^7","~$om.next.impl.parser/join->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",16,"^P",["^K",[["^1G"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",91,"^H",91,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^1G"]]]]]],"~$keyword->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",54,"^G",7,"^H",54,"^I",19,"^J",["^K",["^L",["^K",[["~$k"]]]]]],"^7","~$om.next.impl.parser/keyword->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",19,"^P",["^K",[["~$k"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",54,"^H",54,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["~$k"]]]]]],"~$query->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",81,"^G",7,"^H",81,"^I",17,"^J",["^K",["^L",["^K",[["^1@"]]]]],"^M","Convert a query to its AST representation."],"^7","~$om.next.impl.parser/query->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",17,"^P",["^K",[["^1@"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",81,"^H",81,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["^1@"]]]]],"^M","Convert a query to its AST representation."],"~$ident->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",111,"^G",7,"^H",111,"^I",17,"^J",["^K",["^L",["^K",[[["~$k","~$id","^W","~$ref"]]]]]]],"^7","~$om.next.impl.parser/ident->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",17,"^P",["^K",[["~$p__21877"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",111,"^H",111,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[[["~$k","^1N","^W","^1O"]]]]]]],"~$dispatch",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",307,"^G",7,"^H",307,"^I",15,"^J",["^K",["^L",["^K",[["~$_","~$k","~$_"]]]]]],"^7","~$om.next.impl.parser/dispatch","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",15,"^P",["^K",[["~$_","~$k","~$_"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",307,"^H",307,"^S",3,"^T",true,"^J",["^K",["^L",["^K",[["~$_","~$k","~$_"]]]]]],"~$union-entry->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",59,"^G",7,"^H",59,"^I",23,"^J",["^K",["^L",["^K",[[["~$k","~$v"]]]]]]],"^7","~$om.next.impl.parser/union-entry->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",23,"^P",["^K",[["~$p__21865"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",59,"^H",59,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[[["~$k","~$v"]]]]]]],"~$parser",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",249,"^G",7,"^H",249,"^I",13,"^J",["^K",["^L",["^K",[[["^ ","^11",["~$read","~$mutate"],"^W","~$config"]]]]]],"^M","Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."],"^7","~$om.next.impl.parser/parser","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",13,"^P",["^K",[["~$p__21920"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",249,"^H",249,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[[["^ ","^11",["^1X","^1Y"],"^W","^1Z"]]]]]],"^M","Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."],"~$symbol->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",50,"^G",7,"^H",50,"^I",18,"^J",["^K",["^L",["^K",[["~$k"]]]]]],"^7","~$om.next.impl.parser/symbol->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",18,"^P",["^K",[["~$k"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",50,"^H",50,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["~$k"]]]]]],"~$union->ast",["^ ","^C",null,"^D",["^ ","^E","/home/fx/work/Clojure Reactive Programming/ch07/contacts/resources/public/js/compiled/out/om/next/impl/parser.cljc","^F",69,"^G",7,"^H",69,"^I",17,"^J",["^K",["^L",["^K",[["~$m"]]]]]],"^7","~$om.next.impl.parser/union->ast","^O",false,"^E","resources/public/js/compiled/out/om/next/impl/parser.cljc","^I",17,"^P",["^K",[["~$m"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^F",69,"^H",69,"^S",1,"^T",true,"^J",["^K",["^L",["^K",[["~$m"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:query-root","~:path","~:remote","~:children","~:union-key","~:read","~:key","~:union-entry","~:else","~:call","~$*","~:value","~:params","~:ast","~:type","~:component","~:error/invalid-join","~:error/invalid-expression","~:om.next/abort","~:parser","~:root","~:result","~:prop","~:dispatch-key","~:om-path","~:action","~:target","^L","~:query","~:om.next/error","~:union","~$...","~:mutate","~:om.next/root","~:join","~:elide-paths"]],"~:order",["^2O","^2?","^2F","^2N","^2G","^2=","^2S","^2<","^2@","^2U","^L","^2R","^2;","^2D","^2B","^2L","^29","^2Y","^2V","^2A","^2H","^2I","^2P","~$*","^2J","^2>","^2W","^2Z","^2K","^2X","^2:","^2E","^2C","^2Q","^2M","^2T"]],"^M","\n   Generic query expression parsing and AST manipulation.\n\n   QUERY EXPRESSIONS\n\n   Query expressions are a variation on Datomic Pull Syntax\n   http://docs.datomic.com/pull.html more suitable for generic client/server\n   state transfer. It's important to note the Om Next query expression syntax is\n   *not* a strict superset of Datomic Pull.\n\n   A query expression is composed of EDN values. The grammar for query\n   expressions follows:\n\n   QueryRoot      := EdnVector(QueryExpr*)\n   PlainQueryExpr := (EdnKeyword | IdentExpr | JoinExpr)\n   QueryExpr      := (PlainQueryExpr | ParamExpr)\n   IdentExpr      := EdnVector2(Keyword, EdnValue)\n   ParamExpr      := EdnList2(PlainQueryExpr | EdnSymbol, ParamMapExpr)\n   ParamMapExpr   := EdnMap(Keyword, EdnValue)\n   JoinExpr       := EdnMap((Keyword | IdentExpr), (QueryRoot | UnionExpr | RecurExpr))\n   UnionExpr      := EdnMap(Keyword, QueryRoot)\n   RecurExpr      := ('... | Integer)\n\n   Note most apis in Om Next expect a QueryRoot not a QueryExpr.\n\n   QUERY EXPRESSION AST FORMAT\n\n   Given a QueryExpr you can get the AST via om.next.impl.parser/expr->ast.\n   The following keys can appear in the AST representation:\n\n   {:type         (:prop | :join | :call | :root | :union | :union-entry)\n    :key          (EdnKeyword | EdnSymbol | IdentExpr)\n    :dispatch-key (EdnKeyword | EdnSymbol)\n    :union-key    EdnKeyword\n    :query        (QueryRoot | RecurExpr)\n    :params       ParamMapExpr\n    :children     EdnVector(AST)\n    :component    Object\n    :target       EdnKeyword}\n\n   :query and :params may or may not appear. :type :call is only for\n   mutations."]